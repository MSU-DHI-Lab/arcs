// Generated by CoffeeScript 1.9.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  arcs.utils.Search = (function(superClass) {
    extend(Search, superClass);

    function Search() {
      return Search.__super__.constructor.apply(this, arguments);
    }

    Search.prototype.options = {
      container: null,
      query: '',
      loader: false,
      order: 'modified',
      direction: 'asc',
      page: 1,
      n: 25,
      add: false,
      run: true,
      onSearch: function() {},
      success: function() {},
      error: function() {}
    };

    Search.prototype.facets = {
      id: [],
      sha: [],
      text: [],
      access: ['public', 'private'],
      filetype: arcs.completeFacet,
      filename: arcs.completeFacet,
      title: arcs.completeFacet,
      user: arcs.completeFacet,
      keyword: arcs.completeFacet,
      type: arcs.completeFacet,
      created: function() {
        return arcs.completeDate('resources/complete/created');
      },
      uploaded: function() {
        return arcs.completeDate('resources/complete/created');
      },
      modified: function() {
        return arcs.completeDate('resources/complete/modified');
      }
    };

    Search.prototype.initialize = function() {
      var ref;
      ref = [this.options.query, this.options.page], this.query = ref[0], this.page = ref[1];
      this.collection = this.results = new arcs.collections.ResultSet;
      this.vs = VS.init({
        container: this.options.container,
        query: this.query,
        callbacks: {
          search: (function(_this) {
            return function(query, searchCollection) {
              _this.query = query;
              _this.options.page = 1;
              _this.options.onSearch(query);
              return _this.run();
            };
          })(this),
          facetMatches: (function(_this) {
            return function(callback) {
              return callback(_.keys(_this.facets));
            };
          })(this),
          valueMatches: (function(_this) {
            return function(facet, searchTerm, callback) {
              var val;
              val = _this.facets[facet];
              if (typeof val === 'function') {
                return callback(val(facet, encodeURIComponent(_this.query)));
              } else {
                return callback(val);
              }
            };
          })(this)
        }
      });
      if (this.options.run) {
        return this.run();
      }
    };

    Search.prototype.setQuery = function(query) {
      return this.vs.searchBox.setQuery(query);
    };

    Search.prototype.getLast = function() {
      return this.results.last(this.results.length % this.options.n || this.options.n);
    };

    Search.prototype.run = function(query, options) {
      var params;
      options = _.extend(_.clone(this.options), options);
      if (query == null) {
        query = this.vs.searchBox.value();
      }
      params = ("?related&n=" + options.n) + ("&page=" + options.page) + ("&order=" + options.order) + ("&direction=" + options.direction);
      if (query) {
        params += "&q=" + (encodeURIComponent(query));
      }
      if (options.loader) {
        arcs.loader.show();
      }
      this.results.fetch({
        add: options.add,
        url: this.results.url() + params,
        success: (function(_this) {
          return function(set, res) {
            _this.results.query = res;
            options.success();
            if (options.loader) {
              return arcs.loader.hide();
            }
          };
        })(this),
        error: (function(_this) {
          return function() {
            options.error();
            if (options.loader) {
              return arcs.loader.hide();
            }
          };
        })(this)
      });
      this.query = this.vs.searchBox.value();
      this.page = options.page;
      return this.results;
    };

    return Search;

  })(Backbone.View);

}).call(this);
