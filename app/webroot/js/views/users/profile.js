// Generated by CoffeeScript 1.10.0
(function() {
  var base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if ((base = arcs.views).users == null) {
    base.users = {};
  }

  arcs.views.users.Profile = (function(superClass) {
    var activity, annotations, discussions, fillArray, info, page, transcriptions;

    extend(Profile, superClass);

    function Profile() {
      return Profile.__super__.constructor.apply(this, arguments);
    }

    activity = [];

    annotations = [];

    transcriptions = [];

    discussions = [];

    page = 15;

    info = {
      url: arcs.baseURL
    };

    Profile.prototype.initialize = function(vars) {
      var annoReady, flagsReady, metaReady, that, usersReady;
      console.log(vars);
      info.id = vars.id;
      that = this;
      annoReady = $.ajax({
        url: info.url + 'annotations/findallbyuser',
        type: 'POST',
        data: {
          id: info.id
        },
        success: function(annodata) {
          var contents, count, tcontents, tcount;
          if (!annodata.length) {
            $('#annotations-tab #contents').html('<h3>This user hasn\'t made any annotations yet</h3>');
            $('#transcriptions-tab #contents').html('<h3>This user hasn\'t made any transcriptions yet</h3>');
          } else {
            contents = '';
            count = 0;
            tcontents = '';
            tcount = 0;
            annodata.forEach(function(a) {
              var d, date, linkText, monthNames, type, url;
              if (a['transcript'] === '' || a['transcript'] === null) {
                activity.push({
                  time: a['created'],
                  type: 'annotation',
                  kid: a['resource_kid'],
                  name: a['resource_name'],
                  text: 'Created New Annotation'
                });
                (function(count) {
                  $.ajax({
                    url: info.url + 'resources/viewkid/' + a['resource_kid'] + '.json',
                    type: 'GET',
                    data: {
                      id: a['resource_kid']
                    },
                    success: function(aresult) {
                      var div, resType, thumb;
                      thumb = aresult['thumb'];
                      resType = aresult['Type'];
                      if (resType === null) {
                        resType = 'Unknown Type';
                      }
                      if (!(count >= 15)) {
                        div = $('#annotations-tab .cont')[count];
                        $(div).find('img').attr('src', thumb);
                        $(div).find('.type').text(resType);
                        if (aresult['title'] !== null) {
                          $(div).find('span.name').html(aresult['title']);
                        }
                      }
                      if (aresult['title'] !== null) {
                        annotations[count].name = aresult['title'];
                      }
                      annotations[count].thumb = thumb;
                      annotations[count].resType = resType;
                    }
                  });
                })(count);
                d = new Date(a['created']);
                monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                date = monthNames[d.getMonth()] + ' ' + d.getDate() + ', ' + d.getFullYear();
                if (a['url'] === null || a['url'] === '') {
                  type = 'Relation';
                  url = arcs.baseURL + 'resource/' + a['relation_resource_kid'];
                  linkText = a['relation_resource_name'];
                } else {
                  type = 'URL';
                  url = a['url'];
                  linkText = a['url'];
                }
                annotations.push({
                  kid: a['resource_kid'],
                  name: a['resource_name'],
                  date: date,
                  url: url,
                  linkText: linkText
                });
                if (!(count >= 15)) {
                  contents += '<div class=\'cont\'><div class=\'img\'><a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><img></a></div><p>' + '<a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><span class=\'name\'>' + a['resource_name'] + '</span></a>' + '<span class=\'type\'>Resource Type</span><span class=\'date\'>' + date + '</span></p><p class=\'annotationType\'>' + type + '</p><a href=' + url + '>' + linkText + '</a></div>';
                }
                count++;
              } else {
                activity.push({
                  time: a['created'],
                  type: 'transcription',
                  kid: a['resource_kid'],
                  name: a['resource_name'],
                  text: 'Created New Transcription'
                });
                (function(tcount) {
                  $.ajax({
                    url: info.url + 'resources/viewkid/' + a['resource_kid'] + '.json',
                    type: 'GET',
                    data: {
                      id: a['resource_kid']
                    },
                    success: function(tresult) {
                      var div, resType, thumb;
                      thumb = tresult['thumb'];
                      resType = tresult['Type'];
                      if (resType === null) {
                        resType = 'Unknown Type';
                      }
                      if (!(tcount >= 15)) {
                        div = $('#transcriptions-tab .cont')[tcount];
                        $(div).find('img').attr('src', thumb);
                        $(div).find('.type').text(resType);
                        if (tresult['title'] !== null) {
                          $(div).find('span.name').html(tresult['title']);
                        }
                      }
                      if (tresult['title'] !== null) {
                        transcriptions[tcount].name = tresult['title'];
                      }
                      transcriptions[tcount].thumb = thumb;
                      transcriptions[tcount].resType = resType;
                    }
                  });
                })(tcount);
                d = new Date(a['created']);
                monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                date = monthNames[d.getMonth()] + ' ' + d.getDate() + ', ' + d.getFullYear();
                transcriptions.push({
                  kid: a['resource_kid'],
                  name: a['resource_name'],
                  date: date,
                  transcript: a['transcript']
                });
                if (!(tcount >= 15)) {
                  tcontents += '<div class=\'cont\'><div class=\'img\'><a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><img></a></div>' + '<p><a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><span class=\'name\'>' + a['resource_name'] + '</span></a><span class=\'type\'>Resource Type</span><span class=\'date\'>' + date + '</span></p><p class=\'transcript\'>' + a['transcript'] + '</p></div>';
                }
                tcount++;
              }
            });
            if (!(contents === '')) {
              $('#annotations-tab #contents').html(contents);
            } else {
              $('#annotations-tab #contents').html('<h3>This user hasn\'t made any annotations yet</h3>');
            }
            if (!(tcontents === '')) {
              $('#transcriptions-tab #contents').html(tcontents);
            } else {
              $('#transcriptions-tab #contents').html('<h3>This user hasn\'t made any transcriptions yet</h3>');
            }
            if (count >= 15) {
              that.pagination('annotations', 0);
            }
            if (tcount >= 15) {
              that.pagination('transcriptions', 0);
            }
          }
        }
      });
      $.ajax({
        url: info.url + 'comments/findallbyuser',
        type: 'POST',
        data: {
          id: info.id
        },
        success: function(ddata) {
          console.log(ddata)
          var dcontents, dcount;
          if (!ddata.length) {
            $('#discussion-tab #contents').html('<h3>No discussion items</h3>');
          } else {
            dcontents = '';
            dcount = 0;
            ddata.forEach(function(a) {
              var d, date, monthNames;
              (function(dcount) {
                $.ajax({
                  url: info.url + 'resources/viewkid/' + a['resource_kid'] + '.json',
                  type: 'GET',
                  data: {
                    id: a['resource_kid']
                  },
                  success: function(dresult) {
                    var div, resType, thumb;
                    thumb = dresult['thumb'];
                    resType = dresult['Type'];
                    if (resType === null) {
                      resType = 'Unknown Type';
                    }
                    if (!(dcount >= 15)) {
                      div = $('#discussion-tab .cont')[dcount];
                      $(div).find('img').attr('src', thumb);
                      $(div).find('.type').text(resType);
                      if (dresult['title'] !== null) {
                        $(div).find('span.name').text(dresult['title']);
                      }
                    }
                    if (dresult['title'] !== null) {
                      discussions[dcount].name = dresult['title'];
                    }
                    discussions[dcount].thumb = thumb;
                    discussions[dcount].resType = resType;
                  }
                });
              })(dcount);
              d = new Date(a['created']);
              monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
              date = monthNames[d.getMonth()] + ' ' + d.getDate() + ', ' + d.getFullYear();
              discussions.push({
                kid: a['resource_kid'],
                name: a['resource_name'],
                date: date,
                content: a['content']
              });
              if (!(dcount >= 15)) {
                dcontents += '<div class=\'cont\'><div class=\'img\'><a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><img></a></div><p><a href=\'' + arcs.baseURL + 'resource/' + a['resource_kid'] + '\'><span class=\'name\'>' + a['resource_name'] + '</span></a>' + '<span class=\'type\'>Resource Type</span><span class=\'date\'>' + date + '</span></p><p class=\'transcript\'>' + a['transcript'] + '</p></div>';
              }
              dcount++;
            });
            $('#discussion-tab #contents').html(dcontents);
            if (dcount >= 15) {
              that.pagination('discussions', 0);
            }
          }
        }
      });
      flagsReady = $.ajax({
        url: info.url + 'flags/findallbyuser',
        type: 'POST',
        data: {
          id: info.id
        },
        success: function(fdata) {
            console.log('fdata');
            console.log(fdata);
          fdata.forEach(function(flag) {
            activity.push({
              time: flag['created'],
              type: 'flag',
              kid: flag['resource_kid'],
              name: flag['resource_name'],
              text: 'Created New Flag'
            });
          });
        }
      });
      metaReady = $.ajax({
        url: info.url + 'metadataedits/findallbyuser',
        type: 'POST',
        data: {
          id: info.id
        },
        success: function(mdata) {
          console.log(mdata);
          mdata.forEach(function(edit) {
            activity.push({
              time: edit['modified'],
              type: 'edit',
              kid: edit['resource_kid'],
              name: edit['resource_name'],
              text: 'Edited Metadata'
            });
          });
        }
      });
      usersReady = $.ajax({
        url: info.url + 'users/findbyid',
        type: 'POST',
        data: {
          id: info.id
        },
        success: function(udata) {
          activity.push({
            time: udata['last_login'],
            type: 'log',
            text: 'Logged In'
          });
        }
      });
      $.when(usersReady, flagsReady, annoReady, metaReady).then(function() {
        var content, count;
        activity.sort(function(a, b) {
          var dateA, dateB;
          dateA = new Date(a.time);
          dateB = new Date(b.time);
          return dateB - dateA;
        });
        console.log(activity);
        content = '';
        count = 0;
        activity.forEach(function(a) {
          var date, extra;
          date = new Date(a['time']);
          date.setMinutes(-new Date(new Date().getFullYear(), 0, 1).getTimezoneOffset() + 300);
          date = relativeDate(date);
          extra = '';
          if (a['type'] !== 'log') {
            extra = '<a href=\'' + arcs.baseURL + 'resource/' + a['kid'] + '\'><span class=\'name\'>' + a['name'] + '</span></a><img>';
            (function(count) {
              $.ajax({
                url: info.url + 'resources/viewkid/' + a['kid'] + '.json',
                type: 'GET',
                data: {
                  id: a['kid']
                },
                success: function(result) {
                  var div;
                  if (!(count >= 15)) {
                    div = $('#activity-tab .cont')[count];
                    $(div).find('img').attr('src', result['thumb']);
                    if (result['title'] !== null) {
                      $(div).find('span.name').html(result['title']);
                    }
                  }
                  if (result['title'] !== null) {
                    activity[count].name = result['title'];
                  }
                  activity[count].thumb = result['thumb'];
                }
              });
            })(count);
          }
          if (!(count >= 15)) {
            content += '<div class=\'cont\'><p><span class=\'time\'>' + date + '</span><span class=\'' + a['type'] + '\'></span>' + '<span class=\'text\'>' + a['text'] + '</span>' + extra + '</p></div>';
          }
          count++;
        });
        $('#activity-tab #contents').html(content);
        if (count >= 15) {
          that.pagination('activity', 0);
        }
      });
    };

    fillArray = function(page, lastPage) {
      var i, results;
      if (page < 3) {
        page = 3;
      }
      if (page === lastPage) {
        page = page - 2;
      }
      if (page === lastPage - 1) {
        page = page - 1;
      }
      i = -1;
      results = [];
      while (i < 4) {
        i++;
        if ((page + (i - 2)) <= lastPage) {
          results.push(page + (i - 2));
        } else {
          results.push(0);
        }
      }
      return results;
    };

    Profile.prototype.pagination = function(target, currentPage) {
      var arr, div, i, j, lastPage, pageArray;
      console.log('pagination ' + target);
      if (target === 'activity') {
        arr = activity;
        div = $('#activity-tab');
      } else if (target === 'annotations') {
        arr = annotations;
        div = $('#annotations-tab');
      } else if (target === 'transcriptions') {
        arr = transcriptions;
        div = $('#transcriptions-tab');
      } else if (target === 'discussions') {
        arr = discussions;
        div = $('#discussion-tab');
      }
      lastPage = Math.ceil(arr.length / page);
      pageArray = fillArray(currentPage, lastPage);
      console.log($(div).find('#firstPage'));
      if (indexOf.call(pageArray, 1) >= 0) {
        $(div).find('#firstPage').css('display', 'none');
        $(div).find('.fDots').css('display', 'none');
      } else {
        $(div).find('#firstPage').css('display', 'block');
        $(div).find('.fDots').css('display', 'block');
      }
      if (1 === currentPage) {
        $(div).find('#rightArrow').css('display', 'none');
      } else {
        $(div).find('#rightArrow').css('display', 'block');
      }
      if (indexOf.call(pageArray, lastPage) >= 0) {
        $(div).find('#lastPage').css('display', 'none');
        $(div).find('.dots').css('display', 'none');
        $(div).find('#leftArrow').css('display', 'none');
      } else {
        $(div).find('#lastPage').css('display', 'block');
        $(div).find('.dots').css('display', 'block');
        $(div).find('#leftArrow').css('display', 'block');
      }
      if (currentPage === lastPage) {
        $(div).find('#lefttArrow').css('display', 'none');
      } else {
        $(div).find('#leftArrow').css('display', 'block');
      }
      if (2 === pageArray[0]) {
        $(div).find('.fDots').css('display', 'none');
      }
      if (lastPage - 1 === pageArray[4]) {
        $(div).find('.dots').css('display', 'none');
      }
      for (i = j = 1; j <= 5; i = ++j) {
        if (pageArray[i - 1] <= 0) {
          $(div).find('#' + i).css('display', 'none');
        } else {
          $(div).find('#' + i).css('display', 'block');
          $(div).find('#' + i).html(pageArray[i - 1]);
          if (parseInt($(div).find('#' + i).html()) === currentPage) {
            $(div).find('#' + i).addClass('selected');
            $(div).find('#' + i).addClass('currentPage');
          }
        }
      }
    };

    Profile.prototype.setPage = function(num) {};

    return Profile;

  })(Backbone.View);

}).call(this);
