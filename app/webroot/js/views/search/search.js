// Generated by CoffeeScript 1.10.0
(function() {

  var base, display, filteredFilters, indicators, insertLocks,filters, filtersApplied, selected, selectedCount, selectedMap, sortDirection, totalResults, unfilteredResults, waiting,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  selectedMap = {
    "unselected": [],
    "selected": []
  };


  var searching = false;

  titleOrTime = false;

  selectedCount = 0;

  selected = [];

  display = [];

  totalResults = [];

  waiting = false;

  filters = [];

  filteredFilters = [];

  filtersApplied = {
    'Excavation Name': '',
    'Season Name': '',
    'Type': '',
    'Excavation Type': '',
    'Creator': ''
  };

  unfilteredResults = [];

  if ((base = arcs.views).search == null) {
    base.search = {};
  }

  sortDirection = false;

  arcs.views.search.Search = (function(superClass) {
    var adjustPage, setIndicators ,createAllFilter, fillArray, noResults, pagination, search, setCreators, setExcavations, setFilters, setResources, setSeasons, setSites, showSelected, sortBy;
    extend(Search, superClass);

    function Search() {
      return Search.__super__.constructor.apply(this, arguments);
    }

    Search.selected = [];

    Search.prototype.options = {
      sort: 'title',
      sortDir: 'asc',
      grid: true,
      url: arcs.baseURL + 'search/'
    };

    Search.prototype.changeDisplay = function() {
      if(typeof results_to_display != "undefined"){
        var data = results_to_display
        $(".searchIntro").css("display","none")
        $("#searchBox").css("display","none")
        $("#advanced").css("display","none")
        $('#search-results-wrapper').css({
            visibility : 'visible',
            display    : 'initial'
        });


		var locked = 0;
		for (var kid in data['results']) {
		  if (data['results'][kid].hasOwnProperty('Locked')) {
			locked += 1;
		  }
		}

        $('#results-count').html(data['total'] - locked);
            filters = data['filters'];
            indicators = data['indicators'];
            filteredFilters = filters;
            ref = data['results'];
            for (key in ref) {
              value = ref[key];
              if (value['Title'] === '') {
                value['Title'] = "No title given";
              }
              totalResults.push(value);
              unfilteredResults.push(value);
              selectedMap['unselected'].push(value['kid']);
            }
            selectedMap['unselected'] = totalResults;
            waiting = false;
            setFilters();
            adjustPage(totalResults, 1);
      }
    }
    var setVisualFilter = function (filters) {
        var ul = $("#field-selctor ul")
        ul.empty()
        for (filter in filters) {
            if (filters.hasOwnProperty(filter)) {
                if (filters[filter]) {
                      ul.append(
                      "<li data-field=\"" + filter + "\">" +
                      filter + ": \"" + filters[filter] + "\"" +
                      "<span class=\"exit-btn\">X</span>" +
                      "</li>"
                    )
                }
            }
        }
        $(".exit-btn").unbind().click(function() {
            var e = $(this)
            var filter = e.parent().data("field")
            $(".filter-btn").each(function(){
                if (filter === $(this).data("field")) {
                    filtersApplied[filter] = ""
                    $(this).find(".filter").each(function(){
                        if ($(this).html() == "all") {
                            $(this).trigger("click")
                        }
                   })
                }
            })
          e.parent().remove()
        })


    }
    /* Initialize and define events */
    Search.prototype.initialize = function(options) {

      if(window.globalproject == "all"){
        //remove export button
        $("#options-btn").css("display","none");
        // remove advanced search link
        $(".advancedSearch").remove();
      }

      this.changeDisplay();
      _.extend(this.options, _.pick(options, 'el'));
      this.setupSelect();
      this.setupSearch();
      Backbone.history.start({
        pushState: true,
        root: this.options.url
      });
      this.search.results.on('change remove', this.render, this);
      arcs.bus.on('selection', this.afterSelection, this);

      return this.setupHelp();
    };

    Search.prototype.events = {
      'click #grid-btn': 'toggleView',
      'click #list-btn': 'toggleView',
      'click #top-btn': 'scrollTop',
      'click .dir-btn': 'setSortDir',
      'click .search-page-btn': 'setPage',
      'click .search-type': 'addFacet',
      'click .pageNumber': 'scrollTop',
      'click #leftArrowBox': 'scrollTop',
      'click #rightArrowBox': 'scrollTop',
      'click .sort-btn': 'scrollTop',
      'click .fDots': 'scrollTop',
      'click .dots': 'scrollTop',
      'click #open-colview-form': 'openCollection',
      'click #advancedSearchLink': 'advancedRedirect',
        'click .searchAgain': 'scrollTop',
        'click .search-again-link': 'searchAgain',
        'click .advSearch': 'advancedRedirect',

    };

    Search.prototype.advancedRedirect = function () {
        var href = arcs.baseURL + "search/advanced/" + globalproject
        window.location.href = href
    }
    /* More involved setups run by the initialize method */

    Search.prototype.setupSelect = function() {

      return this.$el.find('#search-results').selectable({
        distance: 20,
        filter: '.img-wrapper img',
        selecting: (function(_this) {
          return function(e, ui) {

            $(ui.selecting).parents('.result').addClass('selected');
            $(ui.selecting).parents('.result').children('.select-button').html('DE-SELECT');
            $(ui.selecting).parents('.result').children('.select-button').addClass('de-select');
            return _this.afterSelection();
          };
        })(this),
        selected: (function(_this) {
          return function(e, ui) {
            $(ui.selected).parents('.result').addClass('selected');
            $(ui.selected).parents('.result').children('.select-button').html('DE-SELECT');
            $(ui.selected).parents('.result').children('.select-button').addClass('de-select');
            return _this.afterSelection();
          };
        })(this),
        unselecting: (function(_this) {
          return function(e, ui) {
            $(ui.unselecting).parents('.result').removeClass('selected');
            $(ui.unselecting).parents('.result').children('.select-button').html('SELECT');
            $(ui.unselecting).parents('.result').children('.select-button').removeClass('de-select');
            return _this.afterSelection();
          };
        })(this),
        unselected: (function(_this) {
          return function(e, ui) {
            $(ui.unselected).parents('.result').removeClass('selected');
            $(ui.unselected).parents('.result').children('.select-button').html('SELECT');
            $(ui.unselected).parents('.result').children('.select-button').removeClass('de-select');
            return _this.afterSelection();
          };
        })(this)
      });
    };

    Search.prototype.setupSearch = function() {
      this.scrollReady = false;
      return this.search = new arcs.utils.Search({
        container: $('searchBox'),
        order: this.options.sort,
        run: false,
        loader: true,
        success: (function(_this) {
          return function() {
            _this.router.navigate((encodeURIComponent(_this.search.query)) + "/p" + _this.search.page);
            if (!_this.scrollReady) {
              _this.setupScroll() && (_this.scrollReady = true);
            }
            _this.setupHelp();
            return _this.render();
          };
        })(this)
      });
    };

    Search.prototype.setupScroll = function() {
      var $actions, $results, $window, pos, ref;
      ref = [this.$('#search-actions'), this.$('#search-results')], $actions = ref[0], $results = ref[1];
      $window = $(window);
      pos = $actions.offset().top - 10;
      return $window.resize(function() {
        if ($window.scrollTop() > pos) {
          return $actions.width($results.width() + 23);
        }
      });
    };

    Search.prototype.setupHelp = function() {
      if (!$('.search-help-btn').length) {
        $('.VS-search-inner').append(arcs.tmpl('search/help-toggle'));
        $('.search-help-btn').click(this.showHelp);
        return $('.search-help-close').click(this.closeHelp);
      }
    };

    Search.prototype.toggleView = function() {
      this.options.grid = !this.options.grid;
      this.$('#grid-btn').toggleClass('active');
      this.$('#list-btn').toggleClass('active');
      $(".resource-thumb").css("margin",'');
      return adjustPage(totalResults, parseInt($('.currentPage').html()));
    };

    Search.prototype.scrollTop = function() {
      var time;
      time = ($(window).scrollTop() / $(document).height()) * 1000;
      return $('html, body').animate({
        scrollTop: 0
      }, time);
    };
    Search.prototype.searchAgain = function(e) {
      var textbox = $(".searchBoxInput").val() || ""
      if (window.globalquery) {
        window.location.href = textbox
      } else {
        window.location.href = window.globalproject + "/" + textbox
      }

    };


    Search.prototype.openCollection = function(e) {
      if (parseInt(this.$('#selected-count').html()) > 0) {
        var form = $(e.target).parent();
        form.find("input").attr({value: JSON.stringify(Search.selected) });
        form.attr({action: arcs.baseURL + "view/"});
        form.submit();
      }
    };

    Search.prototype.setSort = function(e) {
      this.options.sort = e.target.id.match(/sort-(\w+)-btn/)[1];
      this.$('.sort-btn .icon-ok').remove();
      this.$(e.target).append(this.make('i', {
        "class": 'icon-ok'
      }));
      this.$('#sort-btn span#sort-by').html(this.options.sort);
      return this.search.run(null, {
        order: this.options.sort,
        direction: this.options.sortDir
      });
    };

    Search.prototype.setPage = function(e) {
      e.preventDefault();
      this.$el = $(e.currentTarget);
      this.search.options.page = this.$el.data('pageNumber');
      return this.search.run();
    };

    Search.prototype.unselectAll = function(trigger) {
      if (trigger == null) {
        trigger = true;
      }
      Search.selected = selectedMap["selected"]
      this.$(".circle-container").css('background', '')
      this.$('.select-circle').removeClass('selected');
      this.$('.select-overlay').css('opacity', '')
      this.$('.select-overlay').css('background', '')
      this.$('#deselect-all').attr({
        id: 'select-all'
      });
      if (trigger) {
        return arcs.bus.trigger('selection');
      }
    };

    Search.prototype.selectAll = function(trigger) {
      if (trigger == null) {
        trigger = true;
      }
      this.$(".select-overlay").each(function(){
      //  console.log($(this)[0].nextElementSibling);
        w = Math.ceil($(this)[0].nextElementSibling.offsetWidth)
        $(this).css('width', w)
      })
      Search.selected = selectedMap["selected"]
      Search.selected.forEach(function(e) {
        var li = $('li[data-id="'+e+'"]');
        if (li.length) {
          li.find(".circle-container").css('background', 'transparent')
          li.find('.select-circle').addClass('selected');
          li.find('.select-overlay').css('opacity', 1)
          li.find('.select-overlay').css('background', 'rgba(0, 147, 190, 0.75)')
          li.find('#select-all').attr({
            id: 'deselect-all'
          });
        }
      })

      if (trigger) {
        return arcs.bus.trigger('selection');
      }
    };

    Search.prototype.toggle = function(e) {
      if (!(e.ctrlKey || e.shiftKey || e.metaKey)) {
        this.unselectAll(false);
      }
      $(e.currentTarget).parents('.result').toggleClass('selected');
      return arcs.bus.trigger('selection');
    };

    Search.prototype.maybeUnselectAll = function(e) {
      if (!(e instanceof jQuery.Event)) {
        return this.unselectAll();
      }
      if (e.metaKey || e.ctrlKey || e.shiftKey) {
        return false;
      }
      if ($(e.target).attr('src')) {
        return false;
      }
      return this.unselectAll();
    };

    Search.prototype.showHotkeys = function() {
      if ($('.hotkeys-modal').length) {
        return $('.hotkeys-modal').remove();
      }
      return new arcs.views.Hotkeys({
        template: 'search/hotkeys'
      });
    };

    Search.prototype.showHelp = function() {
      return $('.search-help').show();
    };

    Search.prototype.closeHelp = function() {
      return $('.search-help').hide();
    };


    /* Render the search results */

    $('.dropdown-menu').change(function(event) {});

    Search.prototype.append = function() {
      var results;
      if (!(this.search.results.length > this.search.options.n)) {
        return;
      }
      results = new arcs.collections.ResultSet(this.search.getLast());
      return this._render({
        results: results.toJSON()
      }, true);
    };

    Search.prototype.addFacet = function(e) {
      e.preventDefault();
      return this.search.vs.searchBox.addFacet(e.target.text, '', 10);
    };

    fillArray = function(page, lastPage) {
      var i, results1;
      if (page < 3) {
        page = 3;
      }
      if (page === lastPage) {
        page = page - 2;
      }
      if (page === lastPage - 1) {
        page = page - 1;
      }
      i = -1;
      results1 = [];
      while (i < 4) {
        i++;
        if ((page + (i - 2)) <= lastPage) {
          results1.push(page + (i - 2));
        } else {
          results1.push(0);
        }
      }
      return results1;
    };

    pagination = function(pageArray, currentPage, lastPage) {
      var i, j, results1;
      if (indexOf.call(pageArray, 1) >= 0) {
        $('#firstPage').css('display', 'none');
        $('.fDots').css('display', 'none');
      } else {
        $('#firstPage').css('display', 'block');
        $('.fDots').css('display', 'block');
      }
      if (1 === currentPage) {
        $('#rightArrow').css('display', 'none');
      } else {
        $('#rightArrow').css('display', 'block');
      }
      if (indexOf.call(pageArray, lastPage) >= 0) {
        $('#lastPage').css('display', 'none');
        $('.dots').css('display', 'none');
        $('#leftArrow').css('display', 'none');
      } else {
        $('#lastPage').css('display', 'block');
        $('.dots').css('display', 'block');
        $('#leftArrow').css('display', 'block');
      }
      if (currentPage === lastPage) {
        $('#lefttArrow').css('display', 'none');
      } else {
        $('#leftArrow').css('display', 'block');
      }
      if (2 === pageArray[0]) {
        $('.fDots').css('display', 'none');
      }
      if (lastPage - 1 === pageArray[4]) {
        $('.dots').css('display', 'none');
      }
      results1 = [];
      for (i = j = 1; j <= 5; i = ++j) {
        if (pageArray[i - 1] <= 0) {
          results1.push($('#' + i).css('display', 'none'));
        } else {
          $('#' + i).css('display', 'block');
          $('#' + i).html(pageArray[i - 1]);
          if (parseInt($('#' + i).html()) === currentPage) {
            $('#' + i).addClass('selected');
            results1.push($('#' + i).addClass('currentPage'));
          } else {
            results1.push(void 0);
          }
        }
      }
      return results1;
    };

    noResults = function() {
      var i, j, results1;
      $('#firstPage').css('display', 'none');
      $('.fDots').css('display', 'none');
      $('#lastPage').css('display', 'none');
      $('.dots').css('display', 'none');
      $('#leftArrow').css('display', 'none');
      $('#rightArrow').css('display', 'none');
      results1 = [];
      for (i = j = 1; j <= 5; i = ++j) {
        results1.push($('#' + i).css('display', 'none'));
      }
      return results1;
    };

    showSelected = function() {
      return $('.result').each(function() {
        var ref;
        if (ref = $(this).data('id'), indexOf.call(selectedMap['selected'], ref) >= 0) {
          $(this).addClass('selected');
          $(this).find('.select-button').addClass('de-select');
          return $(this).find('.select-button').html('DE-SELECT');
        }
      });
    };
    setIndicators = function(){
      var associator = {
        hasFlags:".icon-flag",
        hasAnnotations:".search-icon-edit",
        hasCollections:".icon-in-collection",
        hasComments:".icon-discussed",
        hasKeywords:".icon-tagged"
      }
      for(var resource in indicators){
        var foundResouce = $('*[data-id=\"'+resource+'\"]');
        if(foundResouce.length){
          for(var prop in associator){
            var element = associator[prop]
            var indicator = foundResouce.find(element)
            var display = indicators[resource][prop]? "":"none";
            indicator.css({display:display})
          }
        }
      }
    }

    function select_selected(){
        $(".resource-thumb").each(function(){
          if(Search.selected.indexOf($(this).attr("data-id")) !== -1 ){
              $(this).find(".results").one("load", function() {
                  w = $(this).css('width')
                  var previus = $(this).prev()
                  $(previus).css('background','rgba(0, 147, 190, 0.75)');
                  $(previus).css("opacity", "1");
                  $(previus).css("width", w);
                  $(previus).find(".select-circle").addClass("selected");
                  $(previus).find(".circle-container").css("background", "transparent");
              })

          }
        })

    }
    function set_widths(){
      $(".select-overlay").each(function(){
        w = Math.ceil($(this)[0].nextElementSibling.childNodes[1].offsetWidth)
        $(this).css('width', w)
      })
    }
    insertLocks = function() {
        var results = arcs.views.search.exportRawResults;
        $(".flex-container").find("li").each(function(el){
         var kid = $(this).data("id");
         if(results[kid]['Locked'])
           $(this).addClass("Locked")
       })
    }

    adjustPage = function(results, currentPage) {
      var lastPage, numberPerPage, pageNum, skip, temp;
      if (waiting) {
        return;
      }
      totalResults.sort(function(a, b) {
        return sortBy(titleOrTime ? "systimestamp" : "Title", a, b, sortDirection);
      });
      console.log(totalResults);
      $('.pageNumber').removeClass('currentPage');
      $('.pageNumber').removeClass('selected');
      pageNum = currentPage;
      numberPerPage = parseInt($('#items-per-page-btn').html().substring(0, 2));
      lastPage = Math.ceil(results.length / numberPerPage);
      temp = fillArray(pageNum, lastPage);
      pagination(temp, pageNum, lastPage);
      skip = (pageNum - 1) * numberPerPage;
      $('#lastPage').html(lastPage);
      Search.prototype._render({
        results: totalResults.slice(skip, skip + numberPerPage)
      });
			// console.log(totalResults["Resource Identifie"]);
      // set_widths()
      select_selected()
      setIndicators();
      calculateMargins();
      // insertLocks();
      searching = false;
        $('.resource-thumb').each(function(){
            var atag = $(this).children().eq(0);
            //console.log(atag);
            var darkBackground = $(atag).children().eq(0);
            if ($(this).find('.resourceLockedDarkBackgroundSearch').length > 0) {
              $(this).find('.circle-container').hide();
            }
            var resourcePicture = $(atag).children().eq(2);
            $(resourcePicture).load(function(){ //wait for each picture to finish loading
                var pictureWidth = resourcePicture[0].getBoundingClientRect().width;
                darkBackground.width(pictureWidth); //background same as picture width
                darkBackground.css('left',0); //recenter the darkbackground
                darkBackground.css('right',0);
                darkBackground.css('margin',"auto");
            });
        });
    };

    setCreators = function() {
      var a, key, li, ref, results1, val;
      $('.creatorMenu').empty();
      $('.creatorMenu').append(createAllFilter());
      ref = filters['creators'];
      results1 = [];
      for (key in ref) {
        val = ref[key];
        li = document.createElement('li');
        a = document.createElement('a');
        $(a).addClass('sort-btn filter');
        $(a).html(val);
        li.appendChild(a);
        results1.push($('.creatorMenu').append(li));
      }
      return results1;
    };

    setExcavations = function() {
      var a, key, li, ref, results1, val;
      $('.excavationMenu').empty();
      $('.excavationMenu').append(createAllFilter());
      ref = filters['sites'];
      results1 = [];
      for (key in ref) {
        val = ref[key];
        li = document.createElement('li');
        a = document.createElement('a');
        $(a).addClass('sort-btn filter');
        $(a).html(val);


        li.appendChild(a);
        results1.push($('.excavationMenu').append(li));
      }
      return results1;
    };

    setResources = function() {
      var a, key, li, ref, results1, val;
      $('.resourcesMenu').empty();
      $('.resourcesMenu').append(createAllFilter());
      ref = filters['types'];
      results1 = [];
      for (key in ref) {
        val = ref[key];
        li = document.createElement('li');
        a = document.createElement('a');
        $(a).addClass('sort-btn filter');
        $(a).html(val);
        li.appendChild(a);
        results1.push($('.resourcesMenu').append(li));
      }
      return results1;
    };

    setSeasons = function() {
      var a, key, li, ref, results1, val;
      $('.seasonsMenu').empty();
      $('.seasonsMenu').append(createAllFilter());
      ref = filters['seasons'];
      results1 = [];
      for (key in ref) {
        val = ref[key];
        li = document.createElement('li');
        a = document.createElement('a');
        $(a).addClass('sort-btn filter');
        $(a).html(val);
        li.appendChild(a);
        results1.push($('.seasonsMenu').append(li));
      }
      return results1;
    };

    setSites = function() {
      var a, key, li, ref, results1, val;
      $('.sitesMenu').empty();
      $('.sitesMenu').append(createAllFilter());
      ref = filters['projects'];
      results1 = [];
      for (key in ref) {
        val = ref[key];
        li = document.createElement('li');
        a = document.createElement('a');
        $(a).addClass('sort-btn filter');
        $(a).html(val);
        li.appendChild(a);
        results1.push($('.sitesMenu').append(li));
      }
      return results1;
    };

    createAllFilter = function() {
      var a, li;
      li = document.createElement('li');
      a = document.createElement('a');
      $(a).addClass('sort-btn filter active');
      $(a).html("all");
      li.appendChild(a);
      return li;
    };

    setFilters = function() {
      setCreators();
      setExcavations();
      setResources();
      setSeasons();
      setSites();
      return setSites();
    };

    sortBy = function(key, a, b, r) {
      r = r ? 1 : -1;
      if (a[key] > b[key]) {
        return -1 * r;
      }
      if (a[key] < b[key]) {
        return +1 * r;
      }
      return 0;
    };

    function buildNewData(data) {
      var newData = {
          "data": [],
          "filters": {
              "creators":[],
              "excavations":[],
              "projects": [],
              "seasons": [],
              "sites": [],
              "types":[]
          },
          'indicators': {},
          'results':{},
          'total': 0
      };
      for (var temp in data){
        newData.total += data[temp]['total'];
      }
        for (var key in data){
            for(var key2 in data[key]){
              if(key2 === "filters"){
                for (var filter in data[key][key2]){
                    if (filter === "projects"){
                        if (data[key]['total'] !== 0){//if there are results for the project
                          newData["filters"][filter].push(key)
                          for(var resource in data[key]["results"]){
                              data[key]["results"][resource]["project"] = key;
                          }
                        }
                    }
                  for (var val in data[key][key2][filter]){

                    if (!(newData["filters"][filter]).includes(data[key][key2][filter][val] )){
                        newData["filters"][filter].push(data[key][key2][filter][val]);
                        console.log(data[key][key2][filter][val]);
                    }

                  }
                }
              }
              else if (key2 === "results" || key2 === "indicators"){
                for (var obj in data[key][key2]){
                  // console.log(data[key][key2][obj]);
                  newData[key2][obj] = (data[key][key2][obj]);
                }
              }

            }

        }
        return newData;
    }
    search = function() {

      searching = true;
      var pageNum, pageNumber, perPage, perPageUrl, resourcequery, val, wiating;
      wiating = true;
      val = $(".searchBoxInput").val();
      pageNum = $('.currentPage').html();
      perPage = $('#items-per-page-btn').html().substring(0, 2);
      //val = val.replace(/[^A-Za-z0-9-]/g, '');
      if (val === "") {
        noResults();
        totalResults = [];
        Search.prototype._render({
          results: totalResults
        });
        return;
      }
      val = val.replace(/\//g,"-")
      resourcequery = encodeURIComponent(""+val);
      // change browser state
      var currentState = window.history.state;
      window.history.replaceState(currentState, "Search Page", arcs.baseURL + 'search/' + globalproject + "/" + resourcequery);

      

      pageNumber = encodeURIComponent("" + pageNum);
      perPageUrl = encodeURIComponent("" + perPage);
      $('.pageNumber').removeClass('currentPage');
      $('.pageNumber').removeClass('selected');
      totalResults = [];
      unfilteredResults = [];
      return $.ajax({
        'dataType': 'json',
        'url': arcs.baseURL + 'simple_search/' + globalproject +"/" + resourcequery + "/" + pageNumber + "/" + perPageUrl,
        'success': function(data) {
          //console.log(arcs.baseURL + 'simple_search/' + globalproject +"/" + resourcequery + "/" + pageNumber + "/" + perPageUrl);
          var key, ref, value;
          if (data['total'] === 0) {
            adjustPage([], 0);
            return noResults();
          } else {
            if (!('results' in data)){
              $(".hiddenProject").removeClass("hiddenProject");
              data = buildNewData(data);
            }

              $(".hideSearchBars").removeClass("hideSearchBars");

              //count locked resources
              var locked = 0;
              for (var kid in data['results']) {
                if (data['results'][kid].hasOwnProperty('Locked')) {
                  locked += 1;
                }
              }
            //#results-count only represents unlocked results
            $('#results-count').html(data['total'] - locked);
            filters = data['filters'];

            indicators = data['indicators'];
            filteredFilters = filters;
            ref = data['results'];
            for (key in ref) {
              value = ref[key];
              if (value['Title'] === '') {
                value['Title'] = "No title given";
              }
              totalResults.push(value);
              unfilteredResults.push(value);
              selectedMap['unselected'].push(value['kid']);
            }
            selectedMap['unselected'] = totalResults;
            waiting = false;

      			//set the results into a global variable for export
      			arcs.views.search.exportResults = totalResults;
            arcs.views.search.exportRawResults = ref

            setFilters();
            Search.prototype._render({
              results: totalResults
            });
            //clear applied filters
            $(".exit-btn").each(function() {
              var e = $(this)
              var filter = e.parent().data("field")
              $(".filter-btn").each(function(){
                  if (filter === $(this).data("field")) {
                      filtersApplied[filter] = ""
                      $(this).find(".filter").each(function(){
                          if ($(this).html() == "all") {
                              $(this).trigger("click")
                          }
                    })
                  }
              })
              e.parent().remove()
            })
            return adjustPage(totalResults, 1);
          }
        }
      });
    };

    $(function() {
      function displayResults(e){
          selectedMap = {
            "unselected": [],
            "selected": []
          };

          if (($("#deselect-all").length)){
              $("#deselect-all").trigger("click");
          }
          $("#selected-count").html("0");
          $("#selected-resource-ids").empty();
          $('.pageNumber').removeClass('selected');
          $('.pageNumber').removeClass('currentPage');
          $("#1").addClass('selected');
          $("#1").addClass('currentPage');
          $("#1").html(1);
          e.preventDefault();
          $('.flex-container').empty();
          $(".flex-container").removeClass("grid-list").removeClass('detailed-list');
          var loaderHtml = $(ARCS_LOADER_HTML);
          $(loaderHtml).css({'position':'absolute','margin':'auto','left':'0','top':'0','right':'0','bottom':'0'});
          $('.flex-container').append(loaderHtml);
          $('#search-results-wrapper').css('visibility', 'visible');
          $('#search-results-wrapper').css('display', 'block');
          return search();
      }

      $("#searchButtonMobile").click(function (e){
          if (searching){
              return;
          }
          displayResults(e);
          calculateMargins();
      });
      $(".searchBoxInput").keyup(function(e) {
        if (e.keyCode === 13) {
            if (searching){
                return;
            }
          displayResults(e);
          calculateMargins();

        }
      });
    });


    Search.prototype._render = function(results, append) {

      var $results, filterResults, getCnt, template;
      if (append == null) {
        append = false;
      }

      $results = $('.flex-container');

      template = this.options.grid ? 'search/grid' : 'search/list';
			if (template === 'search/grid'){
				$(".flex-container").removeClass("detailed-list");
				$(".flex-container").addClass("grid-list");
			}
			else{
				$(".flex-container").removeClass("grid-list");
				$(".flex-container").addClass("detailed-list");
			}
      results = results.results;

      if(results.length && results[0].Orphan == 'TRUE' ){
        $('.toolbar-fixed').css('display', 'none');
      }

      $results[append ? 'append' : 'html'](arcs.tmpl(template, {
        results: results
      }));
      $(".pageNumber").unbind().click(function(e) {
        if ($(this).hasClass('selected')) {
          e.stopPropagation();
        } else {
          $('.pageNumber').removeClass('selected');
          $('.pageNumber').removeClass('currentPage');
          $(this).addClass('selected');
          $(this).addClass('currentPage');
          adjustPage(totalResults, parseInt($('.currentPage').html()));

        }
      });
      $('#leftArrowBox').unbind().click(function(e) {
        var temp;
        temp = $('.currentPage').html();
        $('.currentPage').html(parseInt(temp) + 1);
        return adjustPage(totalResults, parseInt($('.currentPage').html()));
        select_selected()
      });
      $('#rightArrowBox').unbind().click(function(e) {
        var temp;
        temp = $('.currentPage').html();
        if (temp === '1') {

        } else {
          $('.currentPage').html(parseInt(temp) - 1);
          return adjustPage(totalResults, parseInt($('.currentPage').html()));
          select_selected()
        }
      });
      $('#dots').unbind().click(function() {
        var temp;
        temp = parseInt($('.currentPage').html()) + 5;
        if (temp > parseInt($("#lastPage").html())) {
          temp = parseInt($("#lastPage").html());
        }
        $('.currentPage').html(temp);
        return adjustPage(totalResults, parseInt($('.currentPage').html()));
        select_selected()
      });
      $('#fDots').unbind().click(function() {
        var temp;
        temp = parseInt($('.currentPage').html()) - 5;
        if (temp < 1) {
          temp = 1;
        }
        $('.currentPage').html(temp);
        return adjustPage(totalResults, parseInt($('.currentPage').html()));
        select_selected()
      });
      $('.resource-thumb').hover((function() {
        $(this).find('.select-overlay').addClass('select-hover');
        w = $(this).find(".results").css('width')
        $(this).find(".select-overlay").css("width", w);
      }), function() {
        $(this).find('.select-overlay').removeClass('select-hover');
      });
      $('.select-overlay').hover(function(){
        if ($(this).find(".select-circle").hasClass("selected")){
          $(this).css( 'cursor', '' );
        }
        else{
          $(this).css( 'cursor', 'pointer' );
        }
      })
      $('.select-overlay').click(function (e) {
        if ($(this).parent().find('.resourceLockedDarkBackgroundSearch').length == 0) {
          e.stopPropagation();
        }
        if ($(this).find(".select-circle").hasClass("selected")){
          return;
        }
        else{
          var href = $(this).parent().parent().find(".result_a").attr('href')
          if(href !== undefined )
            window.location.href = href;
        }
      })

      //clicked on a individual resource, either select or unselect
      $('.select-circle').click(function(e) {
        e.stopPropagation();
        var makeSelect = false;
        if($(this).hasClass("selected")){
          $(this).removeClass('selected')
          $(this).closest(".circle-container").css('background', '')
          $(this).closest('.select-overlay').css('background', '')
          $(this).closest('.select-overlay').css('opacity', '')
          makeSelect = false;
        }
        else{
          $(this).addClass('selected')
          $(this).closest(".circle-container").css('background', 'transparent')
          $(this).closest('.select-overlay').css('opacity', 1)
          $(this).closest('.select-overlay').css('background', 'rgba(0, 147, 190, 0.75)')
          makeSelect = true;
        }
        var data_id = $(this).closest(".resource-thumb")
        data_id = data_id[0]
        data_id = data_id.getAttribute('data-id');
        if (makeSelect){ //selecting the clicked resource
          Search.selected.push(data_id)
          selectedMap['selected'] = Search.selected
        }else{ //deselecting the resource
          var index = Search.selected.indexOf(data_id)
          Search.selected.splice(index,1)
          selectedMap['selected'] = Search.selected
        }
        //update the add to collections button informations
		//collectionPrep();
        $("#selected-resource-ids").html(JSON.stringify(Search.selected))
        $('#selected-count').html(Search.selected.length)
        if( Search.selected.length == 0 ){ //not clickable
          $('#selected-all, #open-colview-btn').css({
            color: '#C1C1C1'
          });
        } else { //clickable
          $('#selected-all, #open-colview-btn').css({
            color: 'black'
          });
        }
      });

      $('.perpage-btn').unbind().click(function() {
        $('#items-per-page-btn').html($(this).html() + "<span class='pointerDown sort-arrow pointerSearch'></span>");
        $('.pageNumber').removeClass('selected');
        $('.pageNumber').removeClass('currentPage');
        $("#1").addClass('selected');
        $("#1").addClass('currentPage');
        $("#1").html(1);
        return adjustPage(totalResults, parseInt($('.currentPage').html()));
      });
      $('#select-all, #deselect-all').unbind().click(function() {
        var i;
        if (this.id === 'select-all') {
          $('#selected-all, #open-colview-btn').css({
            color: 'black'
          });
          selectedMap['selected'] = [];
          i = 0;
          for (i in totalResults) {
            if(totalResults[i]['Locked'] !== true) {
              selectedMap['selected'].push(totalResults[i]['kid']);
              ++i;
            }
          }
          arcs.searchView.selectAll();
          $('#toggle-select').html('DE-SELECT');
		  this.id = "deselect-all";
          $('#selected-resource-ids').html(JSON.stringify(selectedMap["selected"]));
          return $('#selected-count').html(selectedMap["selected"].length);
        } else {
          $('#selected-all, #open-colview-btn').css({
            color: '#C1C1C1'
          });
          selectedMap['selected'] = [];
          this.id = 'select-all';
          arcs.searchView.unselectAll();
          $('#toggle-select').html('SELECT');
          $('#selected-resource-ids').html(JSON.stringify(selectedMap["selected"]));
          return $('#selected-count').html(selectedMap["selected"].length);
        }
      });
      getCnt = function() {
        var cnt, key, val;
        cnt = 0;
        for (key in filtersApplied) {
          val = filtersApplied[key];
          if (val) {
            cnt++;
          }
        }
        return cnt;
      };
      filterResults = function() {
        var count, creator, excavationType, key, seasonName, sites, type, val;
        totalResults = [];

        sites = filtersApplied['Excavation Name'];
        seasonName = filtersApplied['Season Name'];
        type = filtersApplied['Type'];
        excavationType = filtersApplied['Excavation Type'];
        creator = filtersApplied['Creator'];
        count = 0;
        //console.log(unfilteredResults);
        for (key in unfilteredResults) {
          //console.log(key);
          val = unfilteredResults[key];
          //console.log(val);
          if (val.hasOwnProperty('Locked') === true) {
            continue;
          }

          if (sites !== '') {
            if (val['project'] !== sites) {
              continue;
            }
          }
          if (seasonName !== '') {
            var flag = false;
            if (val['Season Name'] !== seasonName) {
              if(typeof(val['All_Seasons']) != 'undefined'){
                for (key2 in val['All_Seasons']){
                  val2 = val['All_Seasons'][key2];
                  if (val2['Season Name'] == seasonName){
                    flag = true;
                    break;
                  }
                }
              }
              else {
                continue;
              }
              if (!flag){
                continue;
              }
            }
          }
          if (type !== '') {
            if (val['Type'] !== type) {
              continue;
            }
          }
          if (excavationType !== '') {
            var flag = false;
            if (val['Excavation Name'] !== excavationType) {
              if(typeof(val['All_Excavations']) != 'undefined'){
                for (key2 in val['All_Excavations']){
                  val2 = val['All_Excavations'][key2];
                  if (val2['Excavation Name'] === excavationType){
                    flag = true;
                    break;
                  }
                }
              }
              else {
                continue;
              }
              if (!flag){
                continue;
              }
            }
          }

          if (creator !== '') {
            if (indexOf.call(val['Creator'], creator) < 0) {
              continue;
            }
          }
          totalResults.push(val);
          if (val.hasOwnProperty('Locked') === false) {
            count++;
          }

        }
        $('#results-count').html(count);//only represents unlocked results
        adjustPage(totalResults, 1);
      };
      $('.filter').unbind().on("click", function() {
        var currentFilter, filterCnt, filterKey, parentUl;
        if ($(this).hasClass('active')) {

        } else {
          parentUl = $(this).parent().parent();
          filterKey = parentUl.data('id');
          currentFilter = $(this).html();
          if (currentFilter === 'all') {
            currentFilter = '';
          }
          parentUl.find($('.active')).removeClass('active');
          $(this).addClass('active');
          filtersApplied[filterKey] = currentFilter;
          setVisualFilter(filtersApplied)
          filterCnt = getCnt();
          if (filterCnt) {
            filterResults();
          } else {
            totalResults = unfilteredResults;

            //count locked resources
            var locked = 0;
            for (var kid in totalResults) {
              if (totalResults[kid].hasOwnProperty('Locked')) {
                locked += 1;
              }
            }
            //#results-count only represents unlocked results
            $('#results-count').html(totalResults.length - locked);
            adjustPage(totalResults, 1);
          }
        }
      });
      $('.dir-btn').unbind().click(function() {
        var id;
        if ($(this).hasClass('active')) {

        } else {
          $('.dir-btn').removeClass('active');
          $(this).addClass('active');
          id = $(this).attr('id');
          if (id === 'dir-asc-btn') {
            sortDirection = false;
          } else {
            sortDirection = true;
          }
          return adjustPage(totalResults, 1);
        }
      });
      $('.mobile-filter-opt').unbind().click(function () {
            if ($('.tool-bar-results').css("display") == "none"){
                $('.tool-bar-results').css("display",'block')
            }
            else{
                $('.tool-bar-results').css("display",'none')
            }
        });
        $( window ).resize(function() {
            if($( window ).width() > 960){
                $('.tool-bar-results').css("display",'block');
                calculateMargins();
            }
            else{
                if ($(".hiddenProject")[0]){
                    $(".tool-bar-results").css("height" ,"240px");
                } else {
                    $(".tool-bar-results").css("height" ,"300px");
                }

                if(template === "search/list"){
                    $( "#grid-btn" ).trigger( "click" );
                    $(".flex-container").removeClass("detailed-list");
                    $(".flex-container").addClass("grid-list");
                }

                calculateMargins();
            }
        });
    $('.sorter').unbind().click(function() {
      var id;
      if ($(this).hasClass('active')) {

      } else {
        $('.sorter').removeClass('active');
        $(this).addClass('active');
        if ($(this).attr("id") === "sort-title-btn"){
          titleOrTime = false;
        }
        else{
          titleOrTime = true;
        }
        return adjustPage(totalResults, 1);
      }
    });


    if (results.length === 0) {
      return $results.html("<div id='no-results'>No Results</div>");
    }
  };

    return Search;

  })(Backbone.View);

}).call(this);

$(document).ready(function() {

    var dynamic = $('.resource-thumb a img');
    var static = $('.select-overlay');
    static.height(dynamic.height());

    //don't split like this.. but seems to be okay for here
    var url = window.location.href;
    var split = url.split("/").reverse()[0];

    if(split != "search" && window.globalquery != undefined){
        if (split != "advanced_search") {
          $(".searchBoxInput").val(globalquery);
          var e = $.Event("keyup");
          e.keyCode = 13; // # Some key code value
          $(".searchBoxInput").trigger(e);
        }
    }
    if(split == "advanced_search"){
        url= arcs.baseURL + 'advanced_search';
        window.location.replace(url);
    }

});

function calculateMargins() {
    var w = Math.floor($('div#search-results').width());
    var resourceWidth;
    if ($(window).width() < 960){
      //only 2 wide in mobile
        resourceWidth = 228;
        var newMargin =Math.floor((w-resourceWidth)/4);
        $(".resource-thumb").css("margin", "10px " + newMargin + "px")
    }
    else{
        resourceWidth = 180;
        var numOfRes = Math.floor(w/resourceWidth);
        var newMargin = Math.floor((w-(resourceWidth*numOfRes))/(numOfRes*2)) + 15;
        $(".resource-thumb").css("margin", "15px " + (newMargin) + "px");
    }

}
