// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  arcs.views.Annotation = (function(superClass) {
    extend(Annotation, superClass);

    function Annotation() {
      return Annotation.__super__.constructor.apply(this, arguments);
    }

    Annotation.prototype.initialize = function() {
      this.collection = new arcs.collections.AnnotationList;
      this.collection.on('add sync reset remove', this.render, this);
      arcs.bus.on('resourceLoaded', this.onload, this);
      arcs.bus.on('resourceReloaded', this.render, this);
      arcs.bus.on('resourceResize', this.render, this);
      arcs.bus.on('indexChange', this.clear, this);
      arcs.bus.on('annotate', this.toggleState, this);
      this.visible = true;
      this.active = false;
      return arcs.keys.map(this, {
        a: this.collection.fetch()
      });
    };

    Annotation.prototype.events = {
      'click #annotate-new-btn': 'newAnnotation',
      'click #annotate-done-btn': 'exit',
      'mouseenter .annotation': 'onSummaryMouseenter',
      'mouseleave .annotation': 'onSummaryMouseleave',
      'mouseenter .hotspot': 'onBoxMouseenter',
      'mouseleave .hotspot': 'onBoxMouseleave',
      'hover .annotation a': 'onSummaryMouseenter',
      'click .remove-btn': 'removeAnnotation'
    };

    Annotation.prototype.onload = function() {
      this.img = $("img[alt='resource']");
      if (this.active) {
        this.setupSelection();
      }
      return this.collection.fetch();
    };

    Annotation.prototype.toggleState = function() {
      if (this.active) {
        return this.exit();
      } else {
        return this.enter();
      }
    };

    Annotation.prototype.enter = function() {
      this.$('.annotate-controls').show();
      $('#annotate-btn').addClass('disabled');
      $('.hotspot i').show();
      $('#wrapping').css('cursor', 'default');
      this.setupSelection();
      return this.active = true;
    };

    Annotation.prototype.exit = function() {
      this.$('.annotate-controls').hide();
      $('#annotate-btn').removeClass('disabled');
      $('.hotspot i').hide();
      this.removeIas();
      return this.active = false;
    };

    Annotation.prototype.onSummaryMouseenter = function(e) {
      var $li, id;
      if (e.target.tagName === 'A') {
        $li = $(e.target).parent();
      } else {
        $li = $(e.target);
      }
      id = $li.data('id');
      $('.hotspot').removeClass('active');
      return $(".hotspot[data-id='" + id + "']").addClass('active');
    };

    Annotation.prototype.onSummaryMouseleave = function() {
      return $('.hotspot').removeClass('active');
    };

    Annotation.prototype.onBoxMouseenter = function(e) {
      var $el, anno;
      $el = $(e.target);
      $el.fadeTo("fast", 1);
      anno = this.collection.get($el.data('id'));
      $el.popover({
        title: arcs.tmpl('viewer/popover_title', {
          type: anno.getType()
        }),
        content: arcs.tmpl('viewer/popover', anno.toJSON()),
        placement: this._placePopover($el)
      });
      return $el.popover('show');
    };

    Annotation.prototype.onBoxMouseleave = function(e) {
      var $el;
      $el = $(e.target);
      $el.fadeTo("fast", 0);
      return $el.popover('hide');
    };

    Annotation.prototype._placePopover = function($el) {
      var best, choice, k, maxHeight, maxWidth, offsets, ref, ref1;
      ref = [$(window).width(), $(window).height()], maxWidth = ref[0], maxHeight = ref[1];
      offsets = {
        left: $el.offset().left,
        top: $el.offset().top,
        right: maxWidth - ($el.offset().left + $el.width()),
        bottom: maxHeight - ($el.offset().top + $el.height())
      };
      ref1 = ['right', offsets.right], choice = ref1[0], best = ref1[1];
      for (k in offsets) {
        if (offsets[k] > best) {
          best = offsets[(choice = k)];
        }
      }
      if (offsets.bottom < 0) {
        choice = 'top';
      }
      if (offsets.top < 0) {
        choice = 'bottom';
      }
      return choice;
    };

    Annotation.prototype.setupSelection = function(coords) {
      if (coords == null) {
        coords = null;
      }
      this.removeIas();
      return this.ias = this.img.imgAreaSelect({
        instance: true,
        handles: true,
        fadeSpeed: 250,
        parent: this.$('.viewer-well'),
        onSelectEnd: (function(_this) {
          return function(img, sel) {
            if (!arcs.user.get('loggedIn')) {
              return arcs.needsLogin();
            }
            return _this.openAnnotator();
          };
        })(this)
      });
    };

    Annotation.prototype.removeIas = function() {
      this.img.removeData('imgAreaSelect');
      if (this.ias != null) {
        this.ias.remove();
        return this.ias = null;
      }
    };

    Annotation.prototype.toggleVisibility = function() {
      var $btn, msg;
      this.visible = !this.visible;
      msg = "Annotations are " + (this.visible ? 'visible' : 'hidden');
      $btn = $('#annotation-vis-btn');
      $btn.toggleClass('opaque').attr('data-original-title', msg).tooltip('show');
      _.delay(((function(_this) {
        return function() {
          return $btn.tooltip('hide');
        };
      })(this)), 1000);
      if (this.visible) {
        return this.collection.fetch();
      }
      return $('#hotspots-wrapper').html('');
    };

    Annotation.prototype.removeAnnotation = function(e) {
      var $hotspot, anno;
      e.stopPropagation();
      $hotspot = $(e.target).parent();
      $hotspot.popover('hide');
      anno = this.collection.get($hotspot.data('id'));
      if (!anno) {
        return;
      }
      arcs.confirm('Are you sure?', "This <b>" + (anno.getType().toLowerCase()) + "</b> will be deleted.", (function(_this) {
        return function() {
          return anno.destroy();
        };
      })(this));
      return false;
    };

    Annotation.prototype.newAnnotation = function() {
      var height, ref, width, xMid, yMid;
      ref = [this.img.width(), this.img.height()], width = ref[0], height = ref[1];
      xMid = Math.floor(width / 2);
      yMid = Math.floor(height / 2);
      this.ias.setOptions({
        show: true
      });
      this.ias.setSelection(xMid - 50, yMid - 50, xMid + 50, yMid + 50);
      return this.ias.update();
    };

    Annotation.prototype.openAnnotator = function() {
      var ref;
      if ((ref = this.annotator) != null ? ref.isOpen() : void 0) {
        return;
      }
      this.annotator = new arcs.views.Modal({
        title: 'New Annotation',
        subtitle: arcs.tmpl('viewer/annotator'),
        backdrop: false,
        "class": 'annotator',
        buttons: {
          save: {
            "class": 'btn btn-success',
            callback: (function(_this) {
              return function() {
                var data;
                data = {
                  relation: _this.annotator.$('.result.selected img').data('id'),
                  transcript: _this.annotator.$('textarea#transcript').val(),
                  url: _this.annotator.$('input#url').val()
                };
                if (!_.any(data)) {
                  return;
                }
                _this.create(data);
                _this.ias.cancelSelection();
                return delete _this.annotator;
              };
            })(this)
          },
          cancel: (function(_this) {
            return function() {
              _this.ias.cancelSelection();
              return delete _this.annotator;
            };
          })(this)
        }
      });
      this.annotator.$el.on('click', '.result img', function() {
        $('.result').removeClass('selected');
        return $(this).parents('.result').addClass('selected');
      });
      this.annotator.$('input#url').keyup(function() {
        var val;
        val = $(this).val();
        if (val.substring(0, 7) === 'http://') {
          return $(this).val(val.substring(7));
        }
      });
      return this.search = new arcs.utils.Search({
        container: $('.mini-search'),
        success: (function(_this) {
          return function() {
            return $('.mini-search-results').html(arcs.tmpl('search/grid', {
              results: _this.search.results.toJSON()
            }));
          };
        })(this)
      });
    };

    Annotation.prototype.create = function(data) {
      var anno;
      anno = new arcs.models.Annotation({
        resource_id: arcs.resource.id
      });
      if (data.relation) {
        anno.set('relation', data.relation);
      } else if (data.transcript) {
        anno.set('transcript', data.transcript);
      } else {
        anno.set('url', 'http://' + data.url);
      }
      if (this.ias != null) {
        anno.setScaled(this.ias.getSelection(), this.img.height(), this.img.width());
      }
      anno.save();
      anno.set('id', _.uniqueId());
      return this.collection.add(anno);
    };

    Annotation.prototype.clear = function() {
      $('#annotations-wrapper').html('');
      $('#hotspots-wrapper').html('');
      return $('.popover').remove();
    };

    Annotation.prototype.render = function() {
      var annos;
      this.clear();
      if ($("img[alt='resource']").length !== 0) {
        annos = {
          annotations: this.collection.map((function(_this) {
            return function(m) {
              var ref, ref1, rid;
              if (rid = m.get('relation')) {
                m.set('relation', (((ref = _this.search) != null ? ref.results.get(rid) : void 0) || ((ref1 = _this.collection.relations) != null ? ref1.get(rid) : void 0)).toJSON());
              }
              return _.extend(m.toJSON(), m.scaleTo(_this.img.height(), _this.img.width()));
            };
          })(this)),
          offset: $("img[alt='resource']").offset().left - $('#resource').offset().left
        };
        $('#annotations-wrapper').html(arcs.tmpl('viewer/annotations', annos));
        if (this.visible) {
          $('#hotspots-wrapper').html(arcs.tmpl('viewer/hotspots', annos));
        }
        if (this.active) {
          $('.hotspot i').show();
        }
      }
      return this;
    };

    return Annotation;

  })(Backbone.View);

}).call(this);
